// server/src/index.js
const path = require('path');

// –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ server/.env (–∞ –Ω–µ –∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ)
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const MongoStore = require('connect-mongo');
const passport = require('passport');

require('./config/passport');
const { connectDB } = require('./config/db');
const { PORT, CLIENT_ORIGIN, SESSION_SECRET, IN_PROD, MONGO_URI } = require('./config/env');

const app = express();

/* ----------------------------- PROD –∑–∞ –ø—Ä–æ–∫—Å–∏ ----------------------------- */
if (IN_PROD) {
  // –ù—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ secure-–∫—É–∫ –∑–∞ HTTPS-–ø—Ä–æ–∫—Å–∏ (Render)
  app.set('trust proxy', 1);
}

/* --------------------------------- CORS ---------------------------------- */
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ CLIENT_ORIGIN (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
const allowedOrigins = String(CLIENT_ORIGIN || '')
  .split(',')
  .map((o) => o.trim())
  .filter(Boolean);

app.use(
  cors({
    origin(origin, callback) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ Origin (–Ω–∞–ø—Ä. Postman, SSR, health)
      if (!origin) return callback(null, true);

      if (allowedOrigins.includes(origin)) {
        return callback(null, true);
      }
      return callback(new Error('Not allowed by CORS'));
    },
    credentials: true,
  })
);

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ preflight-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', cors({
  origin: (origin, cb) => cb(null, !origin || allowedOrigins.includes(origin)),
  credentials: true,
}));

/* ----------------------------- –ë–∞–∑–æ–≤—ã–µ –º–∏–¥–¥–ª–≤–∞—Ä—ã ----------------------------- */
app.use(morgan('dev'));
app.use(express.json());
app.use(cookieParser());

/* --------------------- –†–∞–∑–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ --------------------- */
// –í–ê–ñ–ù–û: –¥–æ —Ä–æ—É—Ç–æ–≤
app.use('/uploads', express.static(path.join(__dirname, '..', 'uploads')));

/* -------------------------------- –°–µ—Å—Å–∏–∏ -------------------------------- */
app.use(
  session({
    name: 'cc.sid',
    secret: SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    rolling: true, // –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º cookie –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
    cookie: {
      httpOnly: true,
      sameSite: IN_PROD ? 'none' : 'lax', // –¥–ª—è –º–µ–∂—Å–∞–π—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Vercel <-> Render)
      secure: IN_PROD,                    // cookie —Ç–æ–ª—å–∫–æ –ø–æ HTTPS –≤ –ø—Ä–æ–¥–µ
      maxAge: 1000 * 60 * 60 * 24 * 7,    // 7 –¥–Ω–µ–π
    },
    store: MongoStore.create({
      mongoUrl: MONGO_URI,
      collectionName: 'sessions',
      // ttl –±–µ—Ä—ë—Ç—Å—è –∏–∑ cookie.maxAge
    }),
  })
);

/* -------------------------------- Passport ------------------------------- */
app.use(passport.initialize());
app.use(passport.session());

/* --------------------------------- –†–æ—É—Ç—ã --------------------------------- */
app.use('/health', require('./routes/health.routes'));
app.get('/', (_req, res) => res.send('CarCare API is running'));
app.use('/auth', require('./routes/auth.routes'));
app.use('/cars', require('./routes/car.routes'));
app.use('/expenses', require('./routes/expense.routes'));
app.use('/upload', require('./routes/upload.routes'));
app.use('/forum', require('./routes/forum'));

/* ---------------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---------------------- */
app.use((err, _req, res, _next) => {
  console.error('UNCAUGHT ERROR:', err);
  // –ù–µ –ø–∞–ª–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–¥–µ
  res.status(500).json({ message: 'Server error' });
});

/* ---------------------- –°—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---------------------- */
connectDB()
  .then(() => {
    app.listen(PORT, () => {
      console.log(`‚úÖ MongoDB connected`);
      console.log(`üöÄ API on http://localhost:${PORT}`);
    });
  })
  .catch((err) => {
    console.error('Mongo connection error:', err);
    process.exit(1);
  });
